name: Sync Testing Workflow AWS Batch Job

on:
  workflow_dispatch:
    inputs:
      test:
        required: true
        type: choice
        options:
          - sync
          - async
      platform_env:
        type: string
        required: true
      browser_name: 
        type: string
      browser_version: 
        type: string 
      exclude_tags:
        type: string
        required: false
      cucumber_tags:
        type: string
      build_id:
        type: string
      maven_options:
        type: string
        required: false
  workflow_call:
    inputs:
      test:
        required: true
        type: string
        default: 'sync'
      platform_env:
        type: string
        required: true
      browser_name: 
        type: string
      browser_version: 
        type: string 
      exclude_tags:
        type: string
        required: false
      cucumber_tags:
        type: string
      build_id:
        type: string
      maven_options:
        type: string
        required: false
permissions:
  contents: read
  id-token: write

env:
  JOB_NAME: ${{ inputs.build_id }}
  JOB_QUEUE: "OLCS-DEVAPPCI-DEVCI-BATCHTESTRUNNER-dev-job-queue"
  JOB_DEFINITION: "OLCS-DEVAPPCI-DEVCI-batchtestrunner-ftrunner-FTRUNNER"
  REPORT_NAME: "allure.zip"
  AWS_OIDC_ROLE: ${{ ( inputs.test == 'sync' ) && vars.TF_OIDC_ROLE || vars.TF_OIDC_READONLY_ROLE }}
  AWS_REGION: ${{ vars.TF_AWS_REGION }}
  
jobs:
  run-sync-batch:
    name: run sync test on AWS Batch
    runs-on: ubuntu-latest
    outputs:
      job_id: ${{ steps.submit-job.outputs.job_id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Submit AWS Batch Job
        id: submit-job
        run: |
          JOB_ID=$(aws batch submit-job \
            --job-name ${{ env.JOB_NAME }} \
            --job-queue ${{ env.JOB_QUEUE }} \
            --job-definition ${{ env.JOB_DEFINITION }} \
            --container-overrides '{
              "command": [
                "/bin/sh",
                "-c",
                "./run.sh"
              ],
              "environment": [
                {
                  "name": "platformEnv",
                  "value": "${{ inputs.platform_env }}"
                },
                {
                  "name": "browserName",
                  "value": "${{ inputs.browser_name }}"
                },
                {
                  "name": "browserVersion",
                  "value": "${{ inputs.browser_version }}"
                },
                {
                  "name": "exclude_tags",
                  "value": "${{ inputs.exclude_tags }}"
                },
                {
                  "name": "cucumberTags",
                  "value": "${{ inputs.cucumber_tags }}"
                },
                {
                  "name": "buildId",
                  "value": "${{ inputs.build_id }}"
                },
                {
                  "name": "mavenOptions",
                  "value": "${{ inputs.maven_options }}"
                }
              ]
            }')

          jobId=$(echo $JOB_ID | jq -r '.jobId')
          echo "job_id=$jobId" >> $GITHUB_OUTPUT

      - name: Wait for Job Completion
        env:
          JOB_ID: ${{ steps.submit-job.outputs.job_id }}
        run: |
            TIME_OUT=15
            JOB_ID=${{ env.JOB_ID }}
            count=0

            while true; do
              JOB_STATUS=$(aws batch describe-jobs --jobs $JOB_ID --query 'jobs[0].status' --output text)

              if [ "$JOB_STATUS" == "SUCCEEDED" ] || [ "$JOB_STATUS" == "FAILED" ]; then
                echo "Final job status: $JOB_STATUS"
                break
              fi

              echo "Job status: $JOB_STATUS"

              ((TIME_OUT++))

              if [ $count -ge $TIME_OUT ]; then
                echo "Batch JOB with id=${{ env.JOB_ID }} timout. Exiting."
                exit 1
              fi

              sleep 60
            done

            if [ "$JOB_STATUS" == "FAILED" ]; then
              echo "AWS Batch job failed"
              exit 1
            fi

  upload-batch-report:
    name: upload sync report to github
    needs: run-sync-batch
    runs-on: ubuntu-latest
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Allure Report from S3
        env:
          JOB_ID: ${{ needs.run-sync-batch.outputs.job_id }}
          BUCKET_NAME: "devapp-olcs-pri-olcs-autotest-s3"
          BUCKET_KEY: "vol-functional-tests"
        run: |
          mkdir -p ./upload/${{ inputs.build_id }}
          aws s3api get-object \
          --bucket ${{ env.BUCKET_NAME }} \
          --key "${{ env.BUCKET_KEY }}/${{ inputs.build_id }}/${{ env.REPORT_NAME }}" \
          "./upload/${{ inputs.build_id }}/${{ env.REPORT_NAME }}"

      - name: Unzip Allure Report
        run: |
          unzip ./upload/${{ inputs.build_id }}/${{ env.REPORT_NAME }} -d ./upload/${{ inputs.build_id }}/allure-report

      - name: Generate Allure Report
        run: |
          allure generate ./upload/${{ inputs.build_id }}/allure-report --clean -o ./upload/${{ inputs.build_id }}/allure-report

      - name: Copy Allure History
        if: always()
        run: |
          mkdir -p ./upload/${{ inputs.build_id }}/allure-report/history
          cp -r gh-pages/allure-history/* ./upload/${{ inputs.build_id }}/allure-report/history || true

      - name: Upload Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./upload/${{ inputs.build_id }}/allure-report

      - name: Job Succeeded
        if: success()
        run: echo "AWS Batch job completed successfully!"