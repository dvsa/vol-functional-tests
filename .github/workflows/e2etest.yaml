name: End to End Test

on:
  workflow_call:
    inputs:
      #test_oidc_role: TODO: add in OIDC linked role as an input
        #type: string
        #required: false
      platform_env:
        type: string
        required: true
      cucumber_tags:
        type: string
        required: true
      browser_name:
        type: string
        required: true
      browser_version:
        type: string
        required: true
      exclude_tags:
        type: string
        required: false
      maven_options:
        type: string
        required: false

permissions:
  contents: write
  id-token: write
  checks: write

env:
  JOB_QUEUE: "OLCS-DEVAPPCI-DEVCI-BATCHTESTRUNNER-dev-job-queue"
  JOB_DEFINITION: "OLCS-DEVAPPCI-DEVCI-batchtestrunner-ftrunner-FTRUNNER"
  REPORT_NAME: "allure.zip"
  AWS_REGION: "eu-west-1"
  AWS_OIDC_ROLE: ${{ vars.TEST_OIDC_ROLE }}

jobs:
  create-job-name:
    name: Create Job Name
    runs-on: ubuntu-latest
    outputs:
      job_name: ${{ steps.set-job-name.outputs.job_name }}
    steps:
      - name: Set Job Name
        id: set-job-name
        run: |
          buildtime=$(date +"%Y%m%d%H%M%S")
          echo "job_name=e2e-$buildtime-${{ github.run_id }}" >> $GITHUB_OUTPUT

  run-batch:
    name: Run Tests on AWS Batch
    needs: create-job-name
    runs-on: ubuntu-latest
    outputs:
      job_id: ${{ steps.submit-job.outputs.job_id }}
    env:
      JOB_NAME: ${{ needs.create-job-name.outputs.job_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Configure AWS with provided credentials
        #if: "${{ github.event.inputs.test_oidc_role }} =! ''" TODO:add in if logic to check if empty
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 8400

      - name: Submit AWS Batch Job
        id: submit-job
        run: |
          JOB_ID=$(aws batch submit-job \
            --job-name ${{ env.JOB_NAME }} \
            --job-queue ${{ env.JOB_QUEUE }} \
            --job-definition ${{ env.JOB_DEFINITION }} \
            --timeout '{
              "attemptDurationSeconds": 8400
            }' \
            --container-overrides '{
              "command": [
                "/bin/sh",
                "-c",
                "./run.sh"
              ],
              "environment": [
                {
                  "name": "platformEnv",
                  "value": "${{ inputs.platform_env }}"
                },
                {
                  "name": "cucumberTags",
                  "value": "${{ inputs.cucumber_tags }}"
                },
                {
                  "name": "browserName",
                  "value": "${{ inputs.browser_name }}"
                },
                {
                  "name": "browserVersion",
                  "value": "${{ inputs.browser_version }}"
                },
                {
                  "name": "exclude_tags",
                  "value": "${{ inputs.exclude_tags }}"
                },
                {
                  "name": "buildId",
                  "value": "${{ env.JOB_NAME }}"
                },
                {
                  "name": "mavenOptions",
                  "value": "${{ inputs.maven_options }}"
                }
              ]
            }')
          jobId=$(echo $JOB_ID | jq -r '.jobId')
          echo "job_id=$jobId" >> $GITHUB_OUTPUT

      - name: Wait for Job Completion
        env:
          JOB_ID: ${{ steps.submit-job.outputs.job_id }}
        run: |
          TIME_OUT=15
          JOB_ID=${{ env.JOB_ID }}
          count=0
          while true; do
            JOB_STATUS=$(aws batch describe-jobs --jobs $JOB_ID --query 'jobs[0].status' --output text)
            if [ "$JOB_STATUS" == "SUCCEEDED" ] || [ "$JOB_STATUS" == "FAILED" ]; then
              echo "Final job status: $JOB_STATUS"
              break
            fi
            echo "Job status: $JOB_STATUS"
            ((TIME_OUT++))
            if [ $count -ge $TIME_OUT ]; then
              echo "Batch JOB with id=${{ env.JOB_ID }} timout. Exiting."
              exit 1
            fi
            sleep 60
          done
          if [ "$JOB_STATUS" == "FAILED" ]; then
            echo "AWS Batch job failed"
            exit 1
          fi

  upload-batch-report:
    name: Upload Report to GitHub
    needs: [run-batch, create-job-name]
    runs-on: ubuntu-latest
    env:
      FOLDER_NAME: ${{ needs.create-job-name.outputs.job_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS with provided credentials
        #if: "${{ github.event.inputs.test_oidc_role }} =! ''" TODO:add in if logic to check if empty
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 8400

      - name: Download Allure Report from S3
        env:
          JOB_ID: ${{ needs.run-batch.outputs.job_id }}
          BUCKET_NAME: ${{ vars.S3_REPORT_BUCKET }}
          BUCKET_KEY: ${{ vars.S3_REPORT_BUCKET_KEY }}
          FOLDER_NAME: ${{ env.FOLDER_NAME }}
        run: |
          mkdir -p ./upload/${{env.FOLDER_NAME }}
          aws s3api get-object \
            --bucket ${{ env.BUCKET_NAME }} \
            --key "${{ env.BUCKET_KEY }}/${{env.FOLDER_NAME }}/${{ env.REPORT_NAME }}" \
            "./upload/${{env.FOLDER_NAME }}/${{ env.REPORT_NAME }}"

      - name: Unzip Allure Results
        run: |
          mkdir -p ./upload/${{env.FOLDER_NAME }}/allure-results
          unzip ./upload/${{env.FOLDER_NAME }}/${{ env.REPORT_NAME }} -d ./upload/${{env.FOLDER_NAME }}/allure-results
          ls -R ./upload/${{env.FOLDER_NAME }}/allure-results

      - name: Store Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: ./upload/${{ env.FOLDER_NAME }}/allure-results


  report:
    name: Display Report
    needs: [upload-batch-report, create-job-name]
    env:
      REPORT_KEY: ${{ needs.create-job-name.outputs.job_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          name: allure-results

      - name: Console Output Report
        run: |
          echo "Allure report is available at s3://${{ inputs.s3_report_bucket  }}/${{ inputs.s3_report_bucket_key }}/${{env.REPORT_KEY}}/site/allure-maven-plugin/index.html"

      - name: Get Summary
        id: get-summary
        uses: dvsa/.github/.github/actions/surefire-report-summary@main
        with:
          file-path: ./target/surefire-reports/TEST-org.dvsa.testing.framework.parallel.RunCucumberTests.xml
          fail-on-test-failures: true
          fail-on-test-errors: true
          report-path: "https://${{ env.S3_REPORT_BUCKET }}.s3.amazonaws.com/${{ env.S3_REPORT_BUCKET_KEY }}/${{ env.REPORT_KEY }}/site/allure-maven-plugin/index.html"

  job-succeeded:
    name: Job Succeeded
    needs: [report]
    runs-on: ubuntu-latest
    steps:
      - name: Job Succeeded
        if: success()
        run: echo "AWS Batch job completed successfully!"