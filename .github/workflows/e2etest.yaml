name: End to End Test

on:
  workflow_dispatch:
    inputs:
      test_type:
        required: false
        type: string
      platform_env:
        type: string
        required: true
      browser_name:
        type: string
      browser_version:
        type: string
      exclude_tags:
        type: string
        required: false
      cucumber_tags:
        type: string
      maven_options:
        type: string
        required: false
  workflow_call:
    inputs:
      test_type:
        required: false
        type: string
        default: 'sync'
      platform_env:
        type: string
        required: true
      browser_name:
        type: string
        default: 'chrome'
      browser_version:
        type: string
        default: '125'
      exclude_tags:
        type: string
        required: false
        default: 'none'
      cucumber_tags:
        type: string
        default: '@smoke'
      maven_options:
        type: string
        required: false
    secrets:
      aws_oidc_role:
        required: true
      tf_aws_region:
        required: true
      s3_report_bucket:
        required: true
      s3_report_bucket_key:
        required: true

permissions:
  contents: write
  id-token: write
  checks: write

env:
  JOB_QUEUE: "OLCS-DEVAPPCI-DEVCI-BATCHTESTRUNNER-dev-job-queue"
  JOB_DEFINITION: "OLCS-DEVAPPCI-DEVCI-batchtestrunner-ftrunner-FTRUNNER"
  REPORT_NAME: "allure.zip"

jobs:
  create-job-name:
    name: Create Job Name
    runs-on: ubuntu-latest
    outputs:
      job_name: ${{ steps.set-job-name.outputs.job_name }}
    steps:
      - name: Set Job Name
        id: set-job-name
        run: |
          buildtime=$(date +"%Y%m%d%H%M%S")
          echo "job_name=${{ github.event.inputs.test_type || inputs.test_type }}-$buildtime-${{ github.run_id }}" >> $GITHUB_OUTPUT

  run-tests:
    name: Run Tests on AWS Batch
    needs: create-job-name
    runs-on: ubuntu-latest
    outputs:
      job_id: ${{ steps.submit-job.outputs.job_id }}
    env:
      JOB_NAME: ${{ needs.create-job-name.outputs.job_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws_oidc_role }}
          aws-region: ${{ secrets.tf_aws_region }}

      - name: Submit AWS Batch Job
        id: submit-job
        run: |
          JOB_ID=$(aws batch submit-job \
            --job-name ${{ env.JOB_NAME }} \
            --job-queue ${{ env.JOB_QUEUE }} \
            --job-definition ${{ env.JOB_DEFINITION }} \
            --container-overrides '{
              "command": [
                "/bin/sh",
                "-c",
                "./run.sh"
              ],
              "environment": [
                {
                  "name": "platformEnv",
                  "value": "${{ github.event.inputs.platform_env || inputs.platform_env }}"
                },
                {
                  "name": "browserName",
                  "value": "${{ github.event.inputs.browser_name || inputs.browser_name }}"
                },
                {
                  "name": "browserVersion",
                  "value": "${{ github.event.inputs.browser_version || inputs.browser_version }}"
                },
                {
                  "name": "exclude_tags",
                  "value": "${{ github.event.inputs.exclude_tags || inputs.exclude_tags }}"
                },
                {
                  "name": "cucumberTags",
                  "value": "${{ github.event.inputs.cucumber_tags || inputs.cucumber_tags }}"
                },
                {
                  "name": "buildId",
                  "value": "${{ env.JOB_NAME }}"
                },
                {
                  "name": "mavenOptions",
                  "value": "${{ github.event.inputs.maven_options || inputs.maven_options }}"
                }
              ]
            }')
          jobId=$(echo $JOB_ID | jq -r '.jobId')
          echo "job_id=$jobId" >> $GITHUB_OUTPUT

      - name: Wait for Job Completion
        env:
          JOB_ID: ${{ steps.submit-job.outputs.job_id }}
        run: |
          TIME_OUT=15
          JOB_ID=${{ env.JOB_ID }}
          count=0
          while true; do
            JOB_STATUS=$(aws batch describe-jobs --jobs $JOB_ID --query 'jobs[0].status' --output text)
            if [ "$JOB_STATUS" == "SUCCEEDED" ] || [ "$JOB_STATUS" == "FAILED" ]; then
              echo "Final job status: $JOB_STATUS"
              break
            fi
            echo "Job status: $JOB_STATUS"
            ((TIME_OUT++))
            if [ $count -ge $TIME_OUT ]; then
              echo "Batch JOB with id=${{ env.JOB_ID }} timout. Exiting."
              exit 1
            fi
            sleep 60
          done
          if [ "$JOB_STATUS" == "FAILED" ]; then
            echo "AWS Batch job failed"
            exit 1
          fi

  upload-batch-report:
    name: Upload Sync Report to GitHub
    needs: [run-sync-batch, create-job-name]
    runs-on: ubuntu-latest
    env:
      FOLDER_NAME: ${{ needs.create-job-name.outputs.job_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws_oidc_role }}
          aws-region: ${{ secrets.tf_aws_region }}

      - name: Download Allure Report from S3
        env:
          JOB_ID: ${{ needs.run-tests.outputs.job_id }}
          BUCKET_NAME: ${{ secrets.s3_report_bucket }}
          BUCKET_KEY: ${{ secrets.s3_report_bucket_key }}
          FOLDER_NAME: ${{ env.FOLDER_NAME }}
        run: |
          mkdir -p ./upload/${{env.FOLDER_NAME }}
          aws s3api get-object \
            --bucket ${{ env.BUCKET_NAME }} \
            --key "${{ env.BUCKET_KEY }}/${{env.FOLDER_NAME }}/${{ env.REPORT_NAME }}" \
            "./upload/${{env.FOLDER_NAME }}/${{ env.REPORT_NAME }}"

      - name: Unzip Allure Results
        run: |
          mkdir -p ./upload/${{env.FOLDER_NAME }}/allure-results
          unzip ./upload/${{env.FOLDER_NAME }}/${{ env.REPORT_NAME }} -d ./upload/${{env.FOLDER_NAME }}/allure-results
          ls -R ./upload/${{env.FOLDER_NAME }}/allure-results

      - name: Store Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: ./upload/${{env.FOLDER_NAME }}/allure-results

  report:
    name: Display Report
    needs: upload-report
    env:
      REPORT_KEY: ${{ needs.create-job-name.outputs.job_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          name: allure-results

      - name: Console Output Report
        run: |
          echo "Allure report is available at s3://${{ secrets.s3_report_bucket }}/${{ secrets.s3_report_bucket_key }}/${{env.REPORT_KEY}}/site/allure-maven-plugin/index.html"

      - name: Get Summary
        id: get-summary
        uses: ./.github/actions/surefire-report-summary
        with:
          file-path: ./target/surefire-reports/TEST-org.dvsa.testing.framework.parallel.RunCucumberTests.xml
          fail-on-test-failures: true
          fail-on-test-errors: true
          report-path: "https://${{ secrets.s3_report_bucket }}.s3.amazonaws.com/${{ secrets.s3_report_bucket_key }}/${{env.REPORT_KEY }}/site/allure-maven-plugin/index.html"

  job-succeeded:
    name: Job Succeeded
    needs: report
    runs-on: ubuntu-latest
    steps:
      - name: Job Succeeded
        if: success()
        run: echo "AWS Batch job completed successfully!"